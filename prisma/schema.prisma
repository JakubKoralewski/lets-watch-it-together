// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TmdbMediaType {
  MOVIE
  SHOW
  SEASON
  EPISODE
  COLLECTION
}

model MediaLike {
  id              Int             @default(autoincrement()) @id

  tmdbId            Int           @map(name: "tmdb_id")
  type            TmdbMediaType   @default(SHOW)

  user            User            @relation(fields: [userId], references: [id])
  userId          Int             @map(name: "user_id")

  // TODO: dislike, emoji reaction support?
  state           MediaLikeState  @default(LIKED)

  likedAt         DateTime        @map(name:"liked_at") @default(now())
  unlikedAt       DateTime?       @map(name:"unliked_at")

  // TODO: 0-100
  rating          Int             @default(100)

  @@unique([tmdbId, type, userId])
  @@index([tmdbId, type])
  @@index([tmdbId])
  @@map(name: "media_liked")
}

enum MediaLikeState {
  LIKED
  UNLIKED
}

model User {
  id                     Int              @default(autoincrement()) @id
  name                   String?
  email                  String?          @unique
  emailVerified          DateTime?        @map(name: "email_verified")
  image                  String?
  createdAt              DateTime         @default(now()) @map(name: "created_at")
  updatedAt              DateTime         @default(now()) @updatedAt @map(name: "updated_at")
  liked                  MediaLike[]      // TMDB ids

  friendRequestsSent     FriendRequests[] @relation(name: "Requester")
  friendRequestsReceived FriendRequests[] @relation(name: "Requestee")

  meetingsCreated        Meeting[]        @relation(name: "Inviter")
  meetingsReceived       Meeting[]        @relation(name: "Invitee")

  @@map(name: "users")
}

model FriendRequests {
  // TODO: to be able to do cursor pagination one might need to create two custom
  //       int fields on this table, one for the sequential id of the requester's friends
  //       and one for the sequential id of the requestee's friends
  //       note this should only be stored if the friendshipType is ACCEPTED
  //       otherwise logically I think it can be null, but schema may cry
  //       see https://github.com/prisma/prisma/discussions/4888#discussioncomment-264823
  requester              User             @relation(name: "Requester", fields: [requesterId], references: [id])
  requesterId            Int              @map(name: "requester_id")

  requestee              User             @relation(name: "Requestee", fields: [requesteeId], references: [id])
  requesteeId            Int              @map(name: "requestee_id")
  friendshipType         FriendshipType   @map(name: "friendship_type")

  requestedAt            DateTime         @default(now()) @map(name: "requested_at")
  acceptedAt             DateTime?        @map(name: "accepted_at")
  cancelledAt            DateTime?        @map(name: "cancelled_at")
  unfriendedAt           DateTime?        @map(name: "unfriended_at")

  @@id([requesterId, requesteeId])
  @@unique([requesterId, requesteeId])
  @@index([friendshipType])
  @@map(name: "friend_requests")
}

enum FriendshipType {
  REQUESTED
  CANCELLED
  ACCEPTED
  UNFRIENDED_BY_REQUESTER
  UNFRIENDED_BY_REQUESTEE
  DENIED
}

model Meeting {
  id                     Int              @default(autoincrement()) @id

  tmdb                   Int
  tmdbMediaType          TmdbMediaType    @default(SHOW) @map(name: "tmdb_media_type")

//  TODO: possible feature
//  seasonStart            Int?
//  seasonEnd              Int?
//  episodeStart           Int?
//  episodeEnd             Int?

// TODO: redis-based notifications with update state?
// this would need to be incremented on each update
// that should trigger a notification, this could be stored on redis
// but probably should have asource of truth so we can know that redis
// lost some data
// redisUpdateCounter    Int              @map(name: "redis_update_counter")

  inviter                User             @relation(name: "Inviter", fields: [inviterId], references: [id])
  inviterId              Int              @map(name: "inviter_id")

  invitee                User             @relation(name: "Invitee", fields: [inviteeId], references: [id])
  inviteeId              Int              @map(name: "invitee_id")

  suggestedDate          DateTime         @map(name: "suggested_date")
  state                  MeetingState     @default(PROPOSED)

  createdAt              DateTime         @default(now()) @map(name: "created_at")
  acceptedAt             DateTime?        @map(name: "accepted_at")
  cancelledAt            DateTime?        @map(name: "cancelled_at")
  declinedAt             DateTime?        @map(name: "declined_at")
  updatedAt              DateTime         @default(now()) @map(name: "updated_at") @updatedAt

  @@index([inviteeId], name: "inviteeId")
  @@index([inviterId], name: "inviterId")
  @@map(name: "meetings")
}

enum MeetingState {
  PROPOSED
  CANCELLED_INVITER
  CANCELLED_INVITEE
  READ_INVITEE
  READ_INVITER
  EDITED_INVITER
  EDITED_INVITEE
  // FIXME: Don't know who accepted!
  ACCEPTED_INVITEE
  ACCEPTED_INVITER
  DECLINED_INVITEE
  DECLINED_INVITER
  WATCHED
}

model Account {
  id                     Int              @default(autoincrement()) @id
  compoundId             String           @unique @map(name: "compound_id")
  userId                 Int              @map(name: "user_id")
  providerType           String           @map(name: "provider_type")
  providerId             String           @map(name: "provider_id")
  providerAccountId      String           @map(name: "provider_account_id")
  refreshToken           String?          @map(name: "refresh_token")
  accessToken            String?          @map(name: "access_token")
  accessTokenExpires     DateTime?        @map(name: "access_token_expires")
  createdAt              DateTime         @default(now()) @map(name: "created_at")
  updatedAt              DateTime         @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id                    Int               @default(autoincrement()) @id
  userId                Int               @map(name: "user_id")
  expires               DateTime
  sessionToken          String            @unique @map(name: "session_token")
  accessToken           String            @unique @map(name: "access_token")
  createdAt             DateTime          @default(now()) @map(name: "created_at")
  updatedAt             DateTime          @default(now()) @map(name: "updated_at")
  @@map(name: "sessions")
}

model VerificationRequest {
  id                    Int               @default(autoincrement()) @id
  identifier            String
  token                 String            @unique
  expires               DateTime
  createdAt             DateTime          @default(now()) @map(name: "created_at")
  updatedAt             DateTime          @default(now()) @map(name: "updated_at")
  @@map(name: "verification_requests")
}

